// TODO: Use something like this to speed up the computation of axis, is always the same with + and - signes
(1.0/2.0)*M_SQRT2*sqrt((-1.0/4.0*pow(d_ratio,2)*pow(h,2)*pow(-(cx*vr20+fx*vr00)*sin(theta)+(cx*vr21+fx*vr01)*cos(theta),2)-1.0/4.0*pow(d_ratio,2)*pow(h,2)*pow(-(cy*vr20+fy*vr10)*sin(theta)+(cy*vr21+fy*vr11)*cos(theta),2)-1.0/4.0*pow(h,2)*pow(l_ratio,2)*pow((cx*vr20+fx*vr00)*cos(theta)+(cx*vr21+fx*vr01)*sin(theta),2)-1.0/4.0*pow(h,2)*pow(l_ratio,2)*pow((cy*vr20+fy*vr10)*cos(theta)+(cy*vr21+fy*vr11)*sin(theta),2)-1.0/4.0*pow(h,2)*pow(cx*vr22+fx*vr02,2)-1.0/4.0*pow(h,2)*pow(cy*vr22+fy*vr12,2)
-
sqrt((pow((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-(cx*vr20+fx*vr00)*sin(theta)+(cx*vr21+fx*vr01)*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow((cx*vr20+fx*vr00)*cos(theta)+(cx*vr21+fx*vr01)*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(cx*vr22+fx*vr02,2)-pow(cx*vtz+fx*vtx+(1.0/2.0)*h*(cx*vr22+fx*vr02)+x*(cx*vr20+fx*vr00)+y*(cx*vr21+fx*vr01),2),2)-2*((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-(cx*vr20+fx*vr00)*sin(theta)+(cx*vr21+fx*vr01)*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow((cx*vr20+fx*vr00)*cos(theta)+(cx*vr21+fx*vr01)*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(cx*vr22+fx*vr02,2)-pow(cx*vtz+fx*vtx+(1.0/2.0)*h*(cx*vr22+fx*vr02)+x*(cx*vr20+fx*vr00)+y*(cx*vr21+fx*vr01),2))*((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-(cy*vr20+fy*vr10)*sin(theta)+(cy*vr21+fy*vr11)*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow((cy*vr20+fy*vr10)*cos(theta)+(cy*vr21+fy*vr11)*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(cy*vr22+fy*vr12,2)-pow(cy*vtz+fy*vty+(1.0/2.0)*h*(cy*vr22+fy*vr12)+x*(cy*vr20+fy*vr10)+y*(cy*vr21+fy*vr11),2))+pow((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-(cy*vr20+fy*vr10)*sin(theta)+(cy*vr21+fy*vr11)*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow((cy*vr20+fy*vr10)*cos(theta)+(cy*vr21+fy*vr11)*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(cy*vr22+fy*vr12,2)-pow(cy*vtz+fy*vty+(1.0/2.0)*h*(cy*vr22+fy*vr12)+x*(cy*vr20+fy*vr10)+y*(cy*vr21+fy*vr11),2),2)+4*pow((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*(-(cx*vr20+fx*vr00)*sin(theta)+(cx*vr21+fx*vr01)*cos(theta))*(-(cy*vr20+fy*vr10)*sin(theta)+(cy*vr21+fy*vr11)*cos(theta))+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*((cx*vr20+fx*vr00)*cos(theta)+(cx*vr21+fx*vr01)*sin(theta))*((cy*vr20+fy*vr10)*cos(theta)+(cy*vr21+fy*vr11)*sin(theta))+(1.0/4.0)*pow(h,2)*(cx*vr22+fx*vr02)*(cy*vr22+fy*vr12)-(cx*vtz+fx*vtx+(1.0/2.0)*h*(cx*vr22+fx*vr02)+x*(cx*vr20+fx*vr00)+y*(cx*vr21+fx*vr01))*(cy*vtz+fy*vty+(1.0/2.0)*h*(cy*vr22+fy*vr12)+x*(cy*vr20+fy*vr10)+y*(cy*vr21+fy*vr11)),2))/pow((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-vr20*sin(theta)+vr21*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow(vr20*cos(theta)+vr21*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(vr22,2)-pow((1.0/2.0)*h*vr22+vr20*x+vr21*y+vtz,2),2))*((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-vr20*sin(theta)+vr21*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow(vr20*cos(theta)+vr21*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(vr22,2)-pow((1.0/2.0)*h*vr22+vr20*x+vr21*y+vtz,2))+pow(cx*vtz+fx*vtx+(1.0/2.0)*h*(cx*vr22+fx*vr02)+x*(cx*vr20+fx*vr00)+y*(cx*vr21+fx*vr01),2)+pow(cy*vtz+fy*vty+(1.0/2.0)*h*(cy*vr22+fy*vr12)+x*(cy*vr20+fy*vr10)+y*(cy*vr21+fy*vr11),2))/((1.0/4.0)*pow(d_ratio,2)*pow(h,2)*pow(-vr20*sin(theta)+vr21*cos(theta),2)+(1.0/4.0)*pow(h,2)*pow(l_ratio,2)*pow(vr20*cos(theta)+vr21*sin(theta),2)+(1.0/4.0)*pow(h,2)*pow(vr22,2)-pow((1.0/2.0)*h*vr22+vr20*x+vr21*y+vtz,2)))